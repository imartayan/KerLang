
(** Python3 code generator - To transpile to Python3. *)


open Kl_IR

let emit_header oc =
  Format.fprintf oc "
r\"\"\"-------------------------------------------------\\
| This code is generated by the KerLang compiler and |
| is not intended to be manually edited              |
\\--------------------------------------------------\"\"\"\n
def _out(x0, x1):
    print(x0)
    return x1
\n"

let emit_param_sequence oc (params_count : int) = 
  for i = 0 to params_count - 2 do
    Format.fprintf oc "x%d, " i
  done;
  if params_count >= 1 then begin
    Format.fprintf oc "x%d" (params_count - 1)
  end

let rec emit_ast oc ?(self_name : string option = None) (func: ast) =
  match func with
  | Cst value ->
    Format.fprintf oc "%d" value
  | Var id ->
    Format.fprintf oc "x%d" id
  | App(op, args) ->
    Format.fprintf oc "(%a(%a))"
      (emit_op ~self_name) op
      (emit_ast_list ~self_name) args
  | If(cond, ifcase, elsecase) ->
    Format.fprintf oc "(%a if %a else %a)"
      (emit_ast ~self_name) ifcase
      (emit_ast ~self_name) cond
      (emit_ast ~self_name) elsecase

and emit_ast_list oc ?(self_name : string option = None) (ast_list : ast list) =
  match ast_list with
  | [] -> ()
  | ast::[] ->
    emit_ast oc ~self_name:(self_name) ast
  | ast::q ->
    emit_ast oc ~self_name:(self_name) ast;
    Format.fprintf oc "%s" ", ";
    emit_ast_list oc ~self_name:(self_name) q

and emit_op oc ?(self_name : string option = None) (op: op) =
  match op with
  | OUT ->
    Format.fprintf oc "%s" "_out";
  | ADD ->
    Format.fprintf oc "(lambda x0, x1: x0 + x1)"
  | SUB ->
    Format.fprintf oc "(lambda x0, x1: x0 - x1)"
  | MUL ->
    Format.fprintf oc "(lambda x0, x1: x0 * x1)"
  | DIV ->
    Format.fprintf oc "(lambda x0, x1: x0 / x1)"
  | FUN name ->
    Format.fprintf oc "%s" name
  | SELF ->
    match self_name with
    | None -> Kl_errors.dev_error "self_name needed but not provided"
    | Some name -> Format.fprintf oc "%s" name

let emit_ast_as_function_decl oc (name : string) (func : ast) =
  Format.fprintf oc "def %s(%a): return %a\n"
    name
    emit_param_sequence (ast_count_params func)
    (emit_ast ~self_name:(Some(name))) func

let emit_entrypoint_call oc =
  Format.fprintf oc "\nif __name__ == \"__main__\":\n    main()\n"
